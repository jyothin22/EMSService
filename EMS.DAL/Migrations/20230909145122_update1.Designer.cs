// <auto-generated />
using System;
using EMS.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EMS.DAL.Migrations
{
    [DbContext(typeof(EMSDbContext))]
    [Migration("20230909145122_update1")]
    partial class update1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EMSEntity.Models.AnamolyModel", b =>
                {
                    b.Property<int>("AId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AId"));

                    b.Property<string>("ASeverity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ATimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EqId")
                        .HasColumnType("integer");

                    b.HasKey("AId");

                    b.HasIndex("EqId");

                    b.ToTable("Anamoly");
                });

            modelBuilder.Entity("EMSEntity.Models.EquipmentModel", b =>
                {
                    b.Property<int>("EqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EqId"));

                    b.Property<string>("EqDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EqLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EqName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EqStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EqType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EqId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("EMSEntity.Models.MaintenanceModel", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaintenanceId"));

                    b.Property<int>("EqId")
                        .HasColumnType("integer");

                    b.Property<string>("MDesc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MTimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechId")
                        .HasColumnType("integer");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("EqId");

                    b.HasIndex("TechId");

                    b.ToTable("Maintenance");
                });

            modelBuilder.Entity("EMSEntity.Models.SensorModel", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SensorId"));

                    b.Property<int>("EqId")
                        .HasColumnType("integer");

                    b.Property<float>("SPressure")
                        .HasColumnType("real");

                    b.Property<float>("STemperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("STimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("SVibration")
                        .HasColumnType("real");

                    b.HasKey("SensorId");

                    b.HasIndex("EqId");

                    b.ToTable("Sensor");
                });

            modelBuilder.Entity("EMSEntity.Models.TechnicianModel", b =>
                {
                    b.Property<int>("TechId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TechId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TechId");

                    b.ToTable("Technician");
                });

            modelBuilder.Entity("EMSEntity.Models.AnamolyModel", b =>
                {
                    b.HasOne("EMSEntity.Models.EquipmentModel", "equip")
                        .WithMany()
                        .HasForeignKey("EqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("equip");
                });

            modelBuilder.Entity("EMSEntity.Models.MaintenanceModel", b =>
                {
                    b.HasOne("EMSEntity.Models.EquipmentModel", "equip")
                        .WithMany()
                        .HasForeignKey("EqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMSEntity.Models.TechnicianModel", "tech")
                        .WithMany()
                        .HasForeignKey("TechId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("equip");

                    b.Navigation("tech");
                });

            modelBuilder.Entity("EMSEntity.Models.SensorModel", b =>
                {
                    b.HasOne("EMSEntity.Models.EquipmentModel", "equip")
                        .WithMany()
                        .HasForeignKey("EqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("equip");
                });
#pragma warning restore 612, 618
        }
    }
}
